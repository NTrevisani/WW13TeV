#include "TROOT.h"
#include "TCanvas.h"
#include "THStack.h"
#include "TH1F.h"
#include "TLatex.h"
#include "TSystem.h"
#include "TTree.h"
#include "TFile.h"
#include "TGraph.h"
#include "TList.h"
#include "TKey.h"
#include "TObject.h"
#include "TStyle.h"
#include "latinoTree.h"
#include <vector>

TStyle *tdrStyle = new TStyle("tdrStyle","Style for P-TDR");

//number of tight electrons with pt > 20GeV
int nel(std::vector<float> *lepPtvec,std::vector<float> *lepIdvec){
  int cont = 0;
  for(int q = 0; q < lepPtvec -> size(); ++q)
    if(fabs(lepIdvec) -> at(q) == 11)
      if(lepPtvec -> at(q) > 20)
	++cont;
  return cont;
}

//number of tight muons with pt > 20GeV
int nel(std::vector<float> *lepPtvec,std::vector<float> *lepIdvec){
  int cont = 0;
  for(int q = 0; q < lepPtvec -> size(); ++q)
    if(fabs(lepIdvec) -> at(q) == 13)
      if(lepPtvec -> at(q) > 20)
	++cont;
  return cont;
}

//number of prompt electrons with pt > 20GeV which pass the tight lepton requests
int nprompt(std::vector<float> *lepMumIdvec,std::vector<float> *lepMumStatusvec,std::vector<float> *lepPtvec,std::vector<float> *lepIdvec){
  int cont = 0;
  for(int q = 0; q < lepMumId -> size(); ++q)
    if(fabs(lepIdvec) -> at(q) == 11)
      if(lepPtvec -> at(q) > 20)
	if(fabs(lepMumId -> at(q)) == 24 || lepMumId -> at(q) == 23)
	  if(lepMumStatus -> at(q) > 20 && lepMumStatus -> at(q) < 30)
	    ++cont;
  return cont;
}

//number of prompt muons with pt > 20GeV which pass the tight lepton requests
int nprompt(std::vector<float> *lepMumIdvec,
	    std::vector<float> *lepMumStatusvec,
	    std::vector<float> *lepPtvec,
	    std::vector<float> *lepChParticleIsovec,
	    std::vector<float> *lepChHadronIsovec,

	    std::vector<float> *lepIdvec){

  int cont = 0;
  float isolation = 
  for(int q = 0; q < lepMumId -> size(); ++q)
    if(fabs(lepIdvec) -> at(q) == 13)
      if(lepPtvec -> at(q) > 20)
	if(fabs(lepMumId -> at(q)) == 24 || lepMumId -> at(q) == 23)
	  if(lepMumStatus -> at(q) > 20 && lepMumStatus -> at(q) < 30)
	    ++cont;
  return cont;
}

int macroSSOS(TString plotName = "hWnJetsBvetoAfterHt"){

  TFile *f = new TFile("/gpfs/csic_projects/cms/trevisanin/newLatino/latino_TTJets.root");
  TTree *t = (TTree*) f -> Get("latino"); 

  std::vector<float> *lepton_pt  = 0;      t -> SetBranchAddress("std_vector_lepton_pt",&lepton_pt);
  std::vector<float> *lepton_eta = 0;      t -> SetBranchAddress("std_vector_lepton_eta",&lepton_eta);
  std::vector<float> *lepton_phi = 0;      t -> SetBranchAddress("std_vector_lepton_phi",&lepton_phi);
  std::vector<int>   *lepton_id  = 0;      t -> SetBranchAddress("std_vector_lepton_id",&lepton_id);

  std::vector<float> *leptonGen_pt  = 0;   t -> SetBranchAddress("std_vector_leptonGen_pt",&leptonGen_pt);
  std::vector<float> *leptonGen_eta = 0;   t -> SetBranchAddress("std_vector_leptonGen_eta",&leptonGen_eta);
  std::vector<float> *leptonGen_phi = 0;   t -> SetBranchAddress("std_vector_leptonGen_phi",&leptonGen_phi);
  std::vector<float> *leptonGen_mid = 0;   t -> SetBranchAddress("std_vector_leptonGen_mpid",&leptonGen_mid);
  std::vector<float> *leptonGen_mst = 0;   t -> SetBranchAddress("std_vector_leptonGen_mstatus",&leptonGen_mst);

  std::vector<float> *jet_pt     = 0;      t -> SetBranchAddress("std_vector_jet_pt",&jet_pt);
  std::vector<float> *jet_eta    = 0;      t -> SetBranchAddress("std_vector_jet_eta",&jet_eta);
  std::vector<float> *jet_phi    = 0;      t -> SetBranchAddress("std_vector_jet_phi",&jet_phi);

  std::vector<float> *jetGen_pt  = 0;      t -> SetBranchAddress("std_vector_jetGen_pt",&jetGen_pt);
  std::vector<float> *jetGen_eta = 0;      t -> SetBranchAddress("std_vector_jetGen_eta",&jetGen_eta);
  std::vector<float> *jetGen_phi = 0;      t -> SetBranchAddress("std_vector_jetGen_phi",&jetGen_phi);

  std::vector<int>   *hadronFl   = 0;      t -> SetBranchAddress("std_vector_jet_HadronFlavour",&hadronFl);
  std::vector<int>   *partonFl   = 0;      t -> SetBranchAddress("std_vector_jet_PartonFlavour",&partonFl);

  TFile* out = new TFile("fakeNtu.root","recreate");
  out->cd();
  TTree* nt = new TTree("nt","nt");
  nt->SetDirectory(0);

  Float_t jetPt;        nt->Branch("jetPt",&jetPt,"jetPt");
  Float_t jetEta;       nt->Branch("jetEta",&jetEta,"jetEta");
  Float_t jetPhi;       nt->Branch("jetPhi",&jetPhi,"jetPhi");
  Float_t leptonPt;     nt->Branch("leptonPt",&leptonPt,"leptonPt");
  Float_t leptonPhi;    nt->Branch("leptonPhi",&leptonPhi,"leptonPhi");
  Float_t leptonEta;    nt->Branch("leptonEta",&leptonEta,"leptonEta");
  Float_t distance;     nt->Branch("distance",&distance,"distance");
  Int_t   ID;           nt->Branch("ID",&ID,"ID");
  Bool_t  sameSign;     nt->Branch("sameSign",&sameSign,"sameSign");
  Float_t jetGenPt;     nt->Branch("jetGenPt",&jetGenPt,"jetGenPt");
  Float_t jetGenEta;    nt->Branch("jetGenEta",&jetGenEta,"jetGenEta");
  Float_t jetGenPhi;    nt->Branch("jetGenPhi",&jetGenPhi,"jetGenPhi");
  Float_t leptonGenPt;  nt->Branch("leptonGenPt",&leptonGenPt,"leptonGenPt");
  Float_t leptonGenPhi; nt->Branch("leptonGenPhi",&leptonGenPhi,"leptonGenPhi");
  Float_t leptonGenEta; nt->Branch("leptonGenEta",&leptonGenEta,"leptonGenEta");
  Int_t   jetPoint;     nt->Branch("jetPoint",&jetPoint,"jetPoint");

  std::vector<int> point;
  std::vector<float> dist;
  std::vector<int> particleId;
  
  for(int iEntry = 0; iEntry < 1000/*t -> GetEntries()*/; ++iEntry){
    t->GetEntry(iEntry);
    if(iEntry == 0) cout<<"Total events: "<<t->GetEntries()<<endl;
    if(iEntry % 100000 == 0) cout<<"Reading Entry "<<iEntry<<endl;
    int numberLep = nlep(lepton_pt);
    int numberPrompt = nprompt(leptonGen_mid,leptonGen_mst);
    
    //fake - fake
    if(numberPrompt == 0) 
      for(int i = 0; i < numberLep; ++i){
	dist.push_back(1000.);
	point.push_back(10);
	particleId.push_back(leptonId -> at(i));
	for(int j = 0; j < jetGen_pt -> size(); ++j){
	  float dumpDist = (jetGen_eta->at(j) - lepton_eta->at(i))**2 + (jetGen_phi->at(j) - lepton_phi->at(i))**2;
	  if(dumpDist < dist.at(i)){
	    dist.at(i) = dumpDist;
	    point.at(i) = j;
	  }
	}
	jetPoint =  point.at(i);
	leptonGenPt = leptonGen_pt->at(point.at(i));
	leptonGenEta = leptonGen_eta->at(point.at(i));
	leptonGenPhi = leptonGen_phi->at(point.at(i));
	jetGenPt = jetGen_pt->at(point.at(i));
	jetGenEta = jetGen_eta->at(point.at(i));
	jetGenPhi = jetGen_phi->at(point.at(i));
	leptonPt = lepton_pt->at(i);
	leptonEta = lepton_eta->at(point.at(i));
	leptonPhi = lepton_phi->at(point.at(i));
	jetPt = jet_pt->at(point.at(i));
	jetEta = jet_eta->at(point.at(i));
	jetPhi = jet_phi->at(point.at(i));
	distance = sqrt(dist.at(i));
	ID = particleId.at(i);
	nt->Fill();
      }
    dist.clear();
    point.clear();
  }
  nt->Write();
  out->Close();
}
